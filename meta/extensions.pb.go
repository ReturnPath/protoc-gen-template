// Code generated by protoc-gen-go.
// source: meta/extensions.proto
// DO NOT EDIT!

/*
Package meta is a generated protocol buffer package.

# Metadata for protoc-gen-template

This provides a set of options for annotating protobuf source code which
are parse by `protoc-gen-template` and exposed in the data available to
templates.

It is generated from these files:
	meta/extensions.proto

It has these top-level messages:
	FileMetadata
	MessageMetadata
	FieldMetadata
	EnumMetadata
	EnumValueMetadata
	ServiceMetadata
	MethodMetadata
*/
package meta

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Visibility int32

const (
	Visibility_PUBLIC  Visibility = 0
	Visibility_PRIVATE Visibility = 1
)

var Visibility_name = map[int32]string{
	0: "PUBLIC",
	1: "PRIVATE",
}
var Visibility_value = map[string]int32{
	"PUBLIC":  0,
	"PRIVATE": 1,
}

func (x Visibility) String() string {
	return proto.EnumName(Visibility_name, int32(x))
}
func (Visibility) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FileMetadata struct {
	Visibility Visibility `protobuf:"varint,1,opt,name=visibility,enum=template.Visibility" json:"visibility,omitempty"`
	// Arbitrary string tags
	Tags []string `protobuf:"bytes,2048,rep,name=tags" json:"tags,omitempty"`
	// Arbitrary key/value metadata
	Extra map[string]string `protobuf:"bytes,2047,rep,name=extra" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FileMetadata) Reset()                    { *m = FileMetadata{} }
func (m *FileMetadata) String() string            { return proto.CompactTextString(m) }
func (*FileMetadata) ProtoMessage()               {}
func (*FileMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FileMetadata) GetVisibility() Visibility {
	if m != nil {
		return m.Visibility
	}
	return Visibility_PUBLIC
}

func (m *FileMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *FileMetadata) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type MessageMetadata struct {
	Visibility Visibility `protobuf:"varint,1,opt,name=visibility,enum=template.Visibility" json:"visibility,omitempty"`
	// Arbitrary string tags
	Tags []string `protobuf:"bytes,2048,rep,name=tags" json:"tags,omitempty"`
	// Arbitrary key/value metadata
	Extra map[string]string `protobuf:"bytes,2047,rep,name=extra" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MessageMetadata) Reset()                    { *m = MessageMetadata{} }
func (m *MessageMetadata) String() string            { return proto.CompactTextString(m) }
func (*MessageMetadata) ProtoMessage()               {}
func (*MessageMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MessageMetadata) GetVisibility() Visibility {
	if m != nil {
		return m.Visibility
	}
	return Visibility_PUBLIC
}

func (m *MessageMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MessageMetadata) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type FieldMetadata struct {
	Visibility Visibility `protobuf:"varint,1,opt,name=visibility,enum=template.Visibility" json:"visibility,omitempty"`
	// A string identifying a random-value generator for "example" code
	Generator       string  `protobuf:"bytes,2,opt,name=generator" json:"generator,omitempty"`
	ExampleDouble   float64 `protobuf:"fixed64,3,opt,name=example_double,json=exampleDouble" json:"example_double,omitempty"`
	ExampleFloat    float32 `protobuf:"fixed32,4,opt,name=example_float,json=exampleFloat" json:"example_float,omitempty"`
	ExampleInt32    int32   `protobuf:"varint,5,opt,name=example_int32,json=exampleInt32" json:"example_int32,omitempty"`
	ExampleInt64    int64   `protobuf:"varint,6,opt,name=example_int64,json=exampleInt64" json:"example_int64,omitempty"`
	ExampleUint32   uint32  `protobuf:"varint,7,opt,name=example_uint32,json=exampleUint32" json:"example_uint32,omitempty"`
	ExampleUint64   uint64  `protobuf:"varint,8,opt,name=example_uint64,json=exampleUint64" json:"example_uint64,omitempty"`
	ExampleSint32   int32   `protobuf:"zigzag32,9,opt,name=example_sint32,json=exampleSint32" json:"example_sint32,omitempty"`
	ExampleSint64   int64   `protobuf:"zigzag64,10,opt,name=example_sint64,json=exampleSint64" json:"example_sint64,omitempty"`
	ExampleFixed32  uint32  `protobuf:"fixed32,11,opt,name=example_fixed32,json=exampleFixed32" json:"example_fixed32,omitempty"`
	ExampleFixed64  uint64  `protobuf:"fixed64,12,opt,name=example_fixed64,json=exampleFixed64" json:"example_fixed64,omitempty"`
	ExampleSfixed32 int32   `protobuf:"fixed32,13,opt,name=example_sfixed32,json=exampleSfixed32" json:"example_sfixed32,omitempty"`
	ExampleSfixed64 int64   `protobuf:"fixed64,14,opt,name=example_sfixed64,json=exampleSfixed64" json:"example_sfixed64,omitempty"`
	ExampleBool     bool    `protobuf:"varint,15,opt,name=example_bool,json=exampleBool" json:"example_bool,omitempty"`
	ExampleString   string  `protobuf:"bytes,16,opt,name=example_string,json=exampleString" json:"example_string,omitempty"`
	ExampleBytes    []byte  `protobuf:"bytes,17,opt,name=example_bytes,json=exampleBytes,proto3" json:"example_bytes,omitempty"`
	// Arbitrary string tags
	Tags []string `protobuf:"bytes,2048,rep,name=tags" json:"tags,omitempty"`
	// Arbitrary key/value metadata
	Extra map[string]string `protobuf:"bytes,2047,rep,name=extra" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FieldMetadata) Reset()                    { *m = FieldMetadata{} }
func (m *FieldMetadata) String() string            { return proto.CompactTextString(m) }
func (*FieldMetadata) ProtoMessage()               {}
func (*FieldMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FieldMetadata) GetVisibility() Visibility {
	if m != nil {
		return m.Visibility
	}
	return Visibility_PUBLIC
}

func (m *FieldMetadata) GetGenerator() string {
	if m != nil {
		return m.Generator
	}
	return ""
}

func (m *FieldMetadata) GetExampleDouble() float64 {
	if m != nil {
		return m.ExampleDouble
	}
	return 0
}

func (m *FieldMetadata) GetExampleFloat() float32 {
	if m != nil {
		return m.ExampleFloat
	}
	return 0
}

func (m *FieldMetadata) GetExampleInt32() int32 {
	if m != nil {
		return m.ExampleInt32
	}
	return 0
}

func (m *FieldMetadata) GetExampleInt64() int64 {
	if m != nil {
		return m.ExampleInt64
	}
	return 0
}

func (m *FieldMetadata) GetExampleUint32() uint32 {
	if m != nil {
		return m.ExampleUint32
	}
	return 0
}

func (m *FieldMetadata) GetExampleUint64() uint64 {
	if m != nil {
		return m.ExampleUint64
	}
	return 0
}

func (m *FieldMetadata) GetExampleSint32() int32 {
	if m != nil {
		return m.ExampleSint32
	}
	return 0
}

func (m *FieldMetadata) GetExampleSint64() int64 {
	if m != nil {
		return m.ExampleSint64
	}
	return 0
}

func (m *FieldMetadata) GetExampleFixed32() uint32 {
	if m != nil {
		return m.ExampleFixed32
	}
	return 0
}

func (m *FieldMetadata) GetExampleFixed64() uint64 {
	if m != nil {
		return m.ExampleFixed64
	}
	return 0
}

func (m *FieldMetadata) GetExampleSfixed32() int32 {
	if m != nil {
		return m.ExampleSfixed32
	}
	return 0
}

func (m *FieldMetadata) GetExampleSfixed64() int64 {
	if m != nil {
		return m.ExampleSfixed64
	}
	return 0
}

func (m *FieldMetadata) GetExampleBool() bool {
	if m != nil {
		return m.ExampleBool
	}
	return false
}

func (m *FieldMetadata) GetExampleString() string {
	if m != nil {
		return m.ExampleString
	}
	return ""
}

func (m *FieldMetadata) GetExampleBytes() []byte {
	if m != nil {
		return m.ExampleBytes
	}
	return nil
}

func (m *FieldMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *FieldMetadata) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type EnumMetadata struct {
	Visibility Visibility `protobuf:"varint,1,opt,name=visibility,enum=template.Visibility" json:"visibility,omitempty"`
	// Arbitrary string tags
	Tags []string `protobuf:"bytes,2048,rep,name=tags" json:"tags,omitempty"`
	// Arbitrary key/value metadata
	Extra map[string]string `protobuf:"bytes,2047,rep,name=extra" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EnumMetadata) Reset()                    { *m = EnumMetadata{} }
func (m *EnumMetadata) String() string            { return proto.CompactTextString(m) }
func (*EnumMetadata) ProtoMessage()               {}
func (*EnumMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EnumMetadata) GetVisibility() Visibility {
	if m != nil {
		return m.Visibility
	}
	return Visibility_PUBLIC
}

func (m *EnumMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *EnumMetadata) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type EnumValueMetadata struct {
	Visibility Visibility `protobuf:"varint,1,opt,name=visibility,enum=template.Visibility" json:"visibility,omitempty"`
	// Arbitrary string tags
	Tags []string `protobuf:"bytes,2048,rep,name=tags" json:"tags,omitempty"`
	// Arbitrary key/value metadata
	Extra map[string]string `protobuf:"bytes,2047,rep,name=extra" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EnumValueMetadata) Reset()                    { *m = EnumValueMetadata{} }
func (m *EnumValueMetadata) String() string            { return proto.CompactTextString(m) }
func (*EnumValueMetadata) ProtoMessage()               {}
func (*EnumValueMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *EnumValueMetadata) GetVisibility() Visibility {
	if m != nil {
		return m.Visibility
	}
	return Visibility_PUBLIC
}

func (m *EnumValueMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *EnumValueMetadata) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type ServiceMetadata struct {
	Visibility Visibility `protobuf:"varint,1,opt,name=visibility,enum=template.Visibility" json:"visibility,omitempty"`
	// The service address, ie "grpc.example.com"
	Addr string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	// Arbitrary string tags
	Tags []string `protobuf:"bytes,2048,rep,name=tags" json:"tags,omitempty"`
	// Arbitrary key/value metadata
	Extra map[string]string `protobuf:"bytes,2047,rep,name=extra" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ServiceMetadata) Reset()                    { *m = ServiceMetadata{} }
func (m *ServiceMetadata) String() string            { return proto.CompactTextString(m) }
func (*ServiceMetadata) ProtoMessage()               {}
func (*ServiceMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ServiceMetadata) GetVisibility() Visibility {
	if m != nil {
		return m.Visibility
	}
	return Visibility_PUBLIC
}

func (m *ServiceMetadata) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ServiceMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ServiceMetadata) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type MethodMetadata struct {
	Visibility Visibility `protobuf:"varint,1,opt,name=visibility,enum=template.Visibility" json:"visibility,omitempty"`
	// Arbitrary string tags
	Tags []string `protobuf:"bytes,2048,rep,name=tags" json:"tags,omitempty"`
	// Arbitrary key/value metadata
	Extra map[string]string `protobuf:"bytes,2047,rep,name=extra" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MethodMetadata) Reset()                    { *m = MethodMetadata{} }
func (m *MethodMetadata) String() string            { return proto.CompactTextString(m) }
func (*MethodMetadata) ProtoMessage()               {}
func (*MethodMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MethodMetadata) GetVisibility() Visibility {
	if m != nil {
		return m.Visibility
	}
	return Visibility_PUBLIC
}

func (m *MethodMetadata) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MethodMetadata) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

var E_FileMeta = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FileOptions)(nil),
	ExtensionType: (*FileMetadata)(nil),
	Field:         50001,
	Name:          "template.file_meta",
	Tag:           "bytes,50001,opt,name=file_meta,json=fileMeta",
	Filename:      "meta/extensions.proto",
}

var E_MessageMeta = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MessageOptions)(nil),
	ExtensionType: (*MessageMetadata)(nil),
	Field:         50001,
	Name:          "template.message_meta",
	Tag:           "bytes,50001,opt,name=message_meta,json=messageMeta",
	Filename:      "meta/extensions.proto",
}

var E_FieldMeta = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*FieldMetadata)(nil),
	Field:         50001,
	Name:          "template.field_meta",
	Tag:           "bytes,50001,opt,name=field_meta,json=fieldMeta",
	Filename:      "meta/extensions.proto",
}

var E_EnumMeta = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.EnumOptions)(nil),
	ExtensionType: (*EnumMetadata)(nil),
	Field:         50001,
	Name:          "template.enum_meta",
	Tag:           "bytes,50001,opt,name=enum_meta,json=enumMeta",
	Filename:      "meta/extensions.proto",
}

var E_EnumValueMeta = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.EnumValueOptions)(nil),
	ExtensionType: (*EnumValueMetadata)(nil),
	Field:         50001,
	Name:          "template.enum_value_meta",
	Tag:           "bytes,50001,opt,name=enum_value_meta,json=enumValueMeta",
	Filename:      "meta/extensions.proto",
}

var E_ServiceMeta = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.ServiceOptions)(nil),
	ExtensionType: (*ServiceMetadata)(nil),
	Field:         50001,
	Name:          "template.service_meta",
	Tag:           "bytes,50001,opt,name=service_meta,json=serviceMeta",
	Filename:      "meta/extensions.proto",
}

var E_MethodMeta = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.MethodOptions)(nil),
	ExtensionType: (*MethodMetadata)(nil),
	Field:         50001,
	Name:          "template.method_meta",
	Tag:           "bytes,50001,opt,name=method_meta,json=methodMeta",
	Filename:      "meta/extensions.proto",
}

func init() {
	proto.RegisterType((*FileMetadata)(nil), "template.FileMetadata")
	proto.RegisterType((*MessageMetadata)(nil), "template.MessageMetadata")
	proto.RegisterType((*FieldMetadata)(nil), "template.FieldMetadata")
	proto.RegisterType((*EnumMetadata)(nil), "template.EnumMetadata")
	proto.RegisterType((*EnumValueMetadata)(nil), "template.EnumValueMetadata")
	proto.RegisterType((*ServiceMetadata)(nil), "template.ServiceMetadata")
	proto.RegisterType((*MethodMetadata)(nil), "template.MethodMetadata")
	proto.RegisterEnum("template.Visibility", Visibility_name, Visibility_value)
	proto.RegisterExtension(E_FileMeta)
	proto.RegisterExtension(E_MessageMeta)
	proto.RegisterExtension(E_FieldMeta)
	proto.RegisterExtension(E_EnumMeta)
	proto.RegisterExtension(E_EnumValueMeta)
	proto.RegisterExtension(E_ServiceMeta)
	proto.RegisterExtension(E_MethodMeta)
}

func init() { proto.RegisterFile("meta/extensions.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 870 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x66, 0x9a, 0x36, 0x4d, 0x4e, 0x92, 0x26, 0x1d, 0x16, 0x18, 0x96, 0x05, 0xa6, 0x5d, 0x16,
	0x06, 0xa4, 0x4d, 0xa4, 0xd4, 0xb2, 0x4a, 0x10, 0x17, 0x14, 0x5a, 0xa9, 0x12, 0x15, 0xd5, 0x94,
	0x2d, 0x12, 0x5c, 0x44, 0x4e, 0x3d, 0x49, 0x2d, 0xfc, 0x13, 0xd9, 0xe3, 0xaa, 0xbd, 0xe3, 0x8a,
	0x0b, 0xde, 0x07, 0xde, 0x82, 0x8b, 0x15, 0x17, 0x3c, 0x02, 0x8f, 0x01, 0x1a, 0x8f, 0xed, 0x38,
	0x4e, 0x52, 0x09, 0x6d, 0xba, 0x77, 0x99, 0xcf, 0x5f, 0xbe, 0x39, 0xdf, 0x99, 0x39, 0x67, 0x0e,
	0xbc, 0xe5, 0x09, 0x69, 0xf5, 0xc4, 0xad, 0x14, 0x7e, 0xe4, 0x04, 0x7e, 0xd4, 0x9d, 0x86, 0x81,
	0x0c, 0x70, 0x4d, 0x0a, 0x6f, 0xea, 0x5a, 0x52, 0x3c, 0xa6, 0x93, 0x20, 0x98, 0xb8, 0xa2, 0x97,
	0xe0, 0xa3, 0x78, 0xdc, 0xb3, 0x45, 0x74, 0x15, 0x3a, 0x53, 0x19, 0x84, 0x9a, 0xbb, 0xff, 0x27,
	0x82, 0xe6, 0x89, 0xe3, 0x8a, 0x33, 0x21, 0x2d, 0xdb, 0x92, 0x16, 0x36, 0x00, 0x6e, 0x9c, 0xc8,
	0x19, 0x39, 0xae, 0x23, 0xef, 0x08, 0xa2, 0x88, 0xed, 0xf4, 0x1f, 0x75, 0x33, 0xc5, 0xee, 0x65,
	0xfe, 0x8d, 0x17, 0x78, 0xf8, 0x4d, 0xd8, 0x94, 0xd6, 0x24, 0x22, 0xbf, 0x74, 0x68, 0x85, 0xd5,
	0x79, 0xb2, 0xc0, 0x87, 0xb0, 0x25, 0x6e, 0x65, 0x68, 0x91, 0x7f, 0xdb, 0xb4, 0xc2, 0x1a, 0xfd,
	0xbd, 0x99, 0x4c, 0x71, 0xcb, 0xee, 0xb1, 0x22, 0x1d, 0xfb, 0x32, 0xbc, 0xe3, 0xfa, 0x0f, 0x8f,
	0x0f, 0x01, 0x66, 0x20, 0xee, 0x40, 0xe5, 0x67, 0xa1, 0x63, 0xa9, 0x73, 0xf5, 0x13, 0x3f, 0x82,
	0xad, 0x1b, 0xcb, 0x8d, 0x05, 0xd9, 0x48, 0x30, 0xbd, 0x18, 0x6c, 0x1c, 0xa2, 0xfd, 0xbf, 0x10,
	0xb4, 0xcf, 0x44, 0x14, 0x59, 0x93, 0x07, 0xb1, 0xf4, 0x45, 0xc9, 0xd2, 0x47, 0x33, 0x99, 0xd2,
	0xae, 0x6b, 0x75, 0xf5, 0x47, 0x15, 0x5a, 0x27, 0x8e, 0x70, 0xed, 0x57, 0xf4, 0xf4, 0x04, 0xea,
	0x13, 0xe1, 0x8b, 0xd0, 0x92, 0x41, 0x98, 0xee, 0x32, 0x03, 0xf0, 0x33, 0xd8, 0x11, 0xb7, 0x96,
	0x37, 0x75, 0xc5, 0xd0, 0x0e, 0xe2, 0x91, 0x2b, 0x48, 0x85, 0x22, 0x86, 0x78, 0x2b, 0x45, 0xbf,
	0x49, 0x40, 0xfc, 0x14, 0x32, 0x60, 0x38, 0x76, 0x03, 0x4b, 0x92, 0x4d, 0x8a, 0xd8, 0x06, 0x6f,
	0xa6, 0xe0, 0x89, 0xc2, 0x8a, 0x24, 0xc7, 0x97, 0x07, 0x7d, 0xb2, 0x45, 0x11, 0xdb, 0xca, 0x49,
	0xa7, 0x0a, 0x2b, 0x91, 0x4c, 0x83, 0x54, 0x29, 0x62, 0x95, 0x22, 0xc9, 0x34, 0x8a, 0x51, 0xc5,
	0x5a, 0x6a, 0x9b, 0x22, 0xd6, 0xca, 0xa3, 0x7a, 0x91, 0x80, 0x65, 0x9a, 0x69, 0x90, 0x1a, 0x45,
	0x6c, 0x73, 0x8e, 0x36, 0xaf, 0x16, 0x69, 0xb5, 0x3a, 0x45, 0x6c, 0x37, 0xa7, 0x5d, 0x2c, 0xa8,
	0x45, 0x5a, 0x0d, 0x28, 0x62, 0x78, 0x8e, 0x66, 0x1a, 0xf8, 0x13, 0x68, 0xe7, 0xa9, 0x70, 0x6e,
	0x85, 0x7d, 0xd0, 0x27, 0x0d, 0x8a, 0xd8, 0x36, 0xcf, 0xfe, 0x7d, 0xa2, 0xd1, 0x05, 0xa2, 0x69,
	0x90, 0x26, 0x45, 0xac, 0x3a, 0x4f, 0x34, 0x0d, 0xfc, 0x29, 0x74, 0xf2, 0x8d, 0x33, 0xc9, 0x16,
	0x45, 0xac, 0xcd, 0x33, 0x81, 0x8b, 0x14, 0x5e, 0xa4, 0x9a, 0x06, 0xd9, 0xa1, 0x88, 0x75, 0x4a,
	0x54, 0xd3, 0xc0, 0x7b, 0x90, 0xe5, 0x74, 0x38, 0x0a, 0x02, 0x97, 0xb4, 0x29, 0x62, 0x35, 0xde,
	0x48, 0xb1, 0xa3, 0x20, 0x70, 0xe7, 0x1c, 0xcb, 0xd0, 0xf1, 0x27, 0xa4, 0x93, 0xdc, 0x8f, 0xdc,
	0x71, 0x02, 0x16, 0x8f, 0x6c, 0x74, 0x27, 0x45, 0x44, 0x76, 0x29, 0x62, 0xcd, 0xfc, 0xc8, 0x8e,
	0x14, 0xb6, 0xbc, 0x74, 0x3e, 0x2f, 0x95, 0xce, 0x7e, 0xb1, 0x1b, 0x14, 0xae, 0xf6, 0x5a, 0x0b,
	0x47, 0xb5, 0xb7, 0x63, 0x3f, 0xf6, 0x5e, 0x73, 0x7b, 0x2b, 0x6e, 0xb9, 0x56, 0x3f, 0x7f, 0x23,
	0xd8, 0x55, 0xe2, 0x97, 0x0a, 0x79, 0x08, 0x53, 0x5f, 0x96, 0x4c, 0x7d, 0x3c, 0x6f, 0x6a, 0x6e,
	0xdf, 0xb5, 0x3a, 0xfb, 0x07, 0x41, 0xfb, 0x42, 0x84, 0x37, 0xce, 0xd5, 0xab, 0xfa, 0xc2, 0xb0,
	0x69, 0xd9, 0x76, 0xd6, 0xdf, 0x92, 0xdf, 0xff, 0xbb, 0x99, 0x97, 0x22, 0x59, 0xab, 0xd3, 0x97,
	0x08, 0x76, 0xce, 0x84, 0xbc, 0x0e, 0xec, 0x87, 0x38, 0xc0, 0x41, 0xc9, 0xd4, 0xd3, 0xe2, 0x0b,
	0x55, 0xdc, 0x74, 0x9d, 0x9e, 0x3e, 0x7b, 0x06, 0x30, 0x0b, 0x12, 0x03, 0x54, 0xcf, 0x5f, 0x1c,
	0x7d, 0x7b, 0xfa, 0x75, 0xe7, 0x0d, 0xdc, 0x80, 0xed, 0x73, 0x7e, 0x7a, 0xf9, 0xd5, 0xf7, 0xc7,
	0x1d, 0x34, 0xb8, 0x80, 0xfa, 0xd8, 0x71, 0xc5, 0x50, 0xcd, 0x2d, 0xf8, 0x49, 0x57, 0x4f, 0x27,
	0xdd, 0x6c, 0x3a, 0x49, 0xa6, 0x82, 0xef, 0xa6, 0x52, 0x8d, 0x32, 0xe4, 0xe5, 0xaf, 0xea, 0xf1,
	0x69, 0xf4, 0xdf, 0x5e, 0x3e, 0x34, 0xf0, 0xda, 0x38, 0x5d, 0x0d, 0x86, 0xd0, 0xf4, 0xf4, 0xdb,
	0xab, 0x75, 0x3f, 0x5c, 0xd0, 0x4d, 0x9f, 0xe6, 0xb2, 0xf4, 0xbb, 0x2b, 0x1f, 0x6f, 0xde, 0xf0,
	0x66, 0xc0, 0xe0, 0x07, 0x80, 0xb1, 0xea, 0x50, 0x5a, 0xfe, 0xfd, 0x25, 0x61, 0x0b, 0xd7, 0x2e,
	0x8b, 0xbf, 0xb3, 0xa2, 0xbd, 0xf1, 0xfa, 0x38, 0x5b, 0xaa, 0x74, 0x08, 0x3f, 0xf6, 0x56, 0xa5,
	0x43, 0x15, 0xdc, 0x3d, 0xe9, 0x28, 0x36, 0x19, 0x5e, 0x13, 0xe9, 0x6a, 0x70, 0x0d, 0xed, 0x44,
	0x34, 0x39, 0x1c, 0x2d, 0xbd, 0xb7, 0x54, 0x3a, 0xa9, 0xe5, 0xb2, 0xfe, 0x7b, 0xf7, 0xd4, 0x3b,
	0x6f, 0x89, 0x22, 0xa4, 0x12, 0x1f, 0xe9, 0x3a, 0x59, 0x95, 0xf8, 0xb4, 0x8c, 0xee, 0x49, 0x7c,
	0xa9, 0xd0, 0x78, 0x23, 0x9a, 0x01, 0x83, 0x9f, 0xa0, 0xe1, 0x25, 0x77, 0x56, 0xeb, 0x7f, 0xb0,
	0xe4, 0x60, 0xd5, 0xd7, 0xb2, 0x3c, 0x59, 0x75, 0xe5, 0x39, 0x78, 0xf9, 0xfa, 0xc8, 0xfc, 0xed,
	0x77, 0xb2, 0x51, 0x43, 0x3f, 0x76, 0x27, 0x8e, 0xbc, 0x8e, 0x47, 0xdd, 0xab, 0xc0, 0xeb, 0x71,
	0x21, 0xe3, 0xd0, 0x3f, 0xb7, 0xe4, 0xb5, 0x1e, 0x99, 0xaf, 0x9e, 0x4f, 0x84, 0xff, 0x3c, 0x53,
	0xeb, 0xa9, 0x28, 0x46, 0xd5, 0xe4, 0xcb, 0xc1, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfb, 0xa0,
	0x56, 0x2d, 0x7d, 0x0b, 0x00, 0x00,
}
